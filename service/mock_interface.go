// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	models "student-management-system/models"

	gomock "github.com/golang/mock/gomock"
)

// MockStudent is a mock of Student interface.
type MockStudent struct {
	ctrl     *gomock.Controller
	recorder *MockStudentMockRecorder
}

// MockStudentMockRecorder is the mock recorder for MockStudent.
type MockStudentMockRecorder struct {
	mock *MockStudent
}

// NewMockStudent creates a new mock instance.
func NewMockStudent(ctrl *gomock.Controller) *MockStudent {
	mock := &MockStudent{ctrl: ctrl}
	mock.recorder = &MockStudentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudent) EXPECT() *MockStudentMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStudent) Get(ctx context.Context, firstName, lastName string) ([]models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, firstName, lastName)
	ret0, _ := ret[0].([]models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStudentMockRecorder) Get(ctx, firstName, lastName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStudent)(nil).Get), ctx, firstName, lastName)
}

// GetByID mocks base method.
func (m *MockStudent) GetByID(ctx context.Context, id int) (models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStudentMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStudent)(nil).GetByID), ctx, id)
}

// Post mocks base method.
func (m *MockStudent) Post(ctx context.Context, student *models.Student) (models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, student)
	ret0, _ := ret[0].(models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockStudentMockRecorder) Post(ctx, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockStudent)(nil).Post), ctx, student)
}
